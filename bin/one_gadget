#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

require 'one_gadget'

options = { raw: false }
usage = 'Usage: one_gadget [file] [options]'
parser = OptionParser.new do |opts|
  opts.banner = usage

  opts.on('-b', '--build-id BuildID', 'BuildID[sha1] of libc.') do |b|
    options[:build_id] = b
  end

  opts.on('-f', '--[no-]force-file', 'Force search gadgets in file instead of build id first.') do |b|
    options[:force_file] = b
  end

  opts.on('-n', '--near FUNCTIONS/FILE', 'Order gadgets by their distance to the given functions'\
                                         ' or to the GOT functions of the given file.') do |n|
    options[:near] = n
  end

  opts.on('-l', '--level OUTPUT_LEVEL', Integer, 'The output level.',
          'OneGadget automatically selects gadgets with higher successful probability.',
          'Increase this level to ask OneGadget show more gadgets it found.',
          'Default: 0') do |l|
    options[:level] = l
  end

  opts.on('-r', '--[no-]raw', 'Output gadgets offset only, split with one space.') do |v|
    options[:raw] = v
  end

  opts.on('-s', '--script exploit-script', 'Run exploit script with all possible gadgets.',
          'The script will be run as \'exploit-script $offset\'.') do |script|
    options[:script] = script
  end

  opts.on('--info BuildID', 'Show version information given BuildID.') do |b|
    options[:info] = b
  end

  opts.on('--version', 'Current gem version.') do |v|
    options[:version] = v
  end
end
parser.parse!

if options[:version]
  puts "OneGadget Version #{OneGadget::VERSION}"
  exit(0)
end

def execute(script, offset)
  pid = fork do
    exec([script, offset.to_s].join(' '))
  end
  Process.wait pid
end

if options[:info]
  result = OneGadget::Gadget.builds_info(options[:info])
  exit(1) if result.nil? # error happend
  OneGadget::Logger.info("Information of #{options[:info]}:\n#{result.join("\n")}\n")
  exit(0)
end

level = options[:level] || 0
if options[:build_id]
  gadgets = OneGadget.gadgets(build_id: options[:build_id], details: true, level: level)
elsif ARGV[0]
  gadgets = OneGadget.gadgets(file: ARGV[0], details: true, force_file: options[:force_file], level: level)
else
  puts parser.help
  exit(1)
end

if options[:script]
  gadgets.map(&:offset).each do |offset|
    OneGadget::Logger.info("Trying #{OneGadget::Helper.colored_hex(offset)}...\n")
    execute(options[:script], offset)
  end
  exit(0)
end

if !options[:build_id] && ARGV[0] && options[:near]
  functions = if File.file?(options[:near]) && OneGadget::Helper.valid_elf_file?(options[:near])
                OneGadget::Helper.got_functions(options[:near])
              else
                options[:near].split(',').map(&:strip)
              end
  function_offsets = OneGadget::Helper.function_offsets(ARGV[0], functions)
  function_offsets.each do |function, offset|
    colored_offset = OneGadget::Helper.colored_hex(offset)
    OneGadget::Logger.warn("Gadgets near #{OneGadget::Helper.colorize(function)}(#{colored_offset}):\n")
    gadgets.sort_by! { |gadget| (gadget.offset - offset).abs }
    if options[:raw]
      puts gadgets.map(&:offset).join(' ')
    else
      puts gadgets.map(&:inspect).join("\n")
    end
    puts "\n"
  end
  exit(0)
end

if options[:raw]
  puts gadgets.map(&:offset).join(' ')
else
  puts gadgets.map(&:inspect).join("\n")
end
